package net.landzero.xlog.druid;

import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.filter.FilterEventAdapter;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.ResultSetProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import net.landzero.xlog.XLog;
import org.springframework.stereotype.Component;

import java.sql.SQLException;

@Component
public class XLogFilter extends FilterEventAdapter {

    @Override
    public ResultSetProxy statement_executeQuery(FilterChain chain, StatementProxy statement, String sql)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            return super.statement_executeQuery(chain, statement, sql);
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            return super.statement_execute(chain, statement, sql);
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public boolean preparedStatement_execute(FilterChain chain, PreparedStatementProxy statement) throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            return super.preparedStatement_execute(chain, statement);
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public ResultSetProxy preparedStatement_executeQuery(FilterChain chain, PreparedStatementProxy statement)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            ResultSetProxy resultSetProxy = super.preparedStatement_executeQuery(chain, statement);
            resultSetProxy.last();
            eventBuilder.setAffectedRows(resultSetProxy.getRow());
            resultSetProxy.beforeFirst();
            return resultSetProxy;
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public int preparedStatement_executeUpdate(FilterChain chain, PreparedStatementProxy statement) throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            int affectedRows = super.preparedStatement_executeUpdate(chain, statement);
            eventBuilder.setAffectedRows(affectedRows);
            return affectedRows;
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql, int autoGeneratedKeys)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            return super.statement_execute(chain, statement, sql, autoGeneratedKeys);
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql, int[] columnIndexes)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            return super.statement_execute(chain, statement, sql, columnIndexes);
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql, String[] columnNames)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            return super.statement_execute(chain, statement, sql, columnNames);
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            int affectedRows = super.statement_executeUpdate(chain, statement, sql);
            eventBuilder.setAffectedRows(affectedRows);
            return affectedRows;
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql, int autoGeneratedKeys)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            int affectedRows = super.statement_executeUpdate(chain, statement, sql, autoGeneratedKeys);
            eventBuilder.setAffectedRows(affectedRows);
            return affectedRows;
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql, int[] columnIndexes)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            int affectedRows = super.statement_executeUpdate(chain, statement, sql, columnIndexes);
            eventBuilder.setAffectedRows(affectedRows);
            return affectedRows;
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }

    @Override
    public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql, String[] columnNames)
            throws SQLException {
        TrackEventBuilder eventBuilder = new TrackEventBuilder().setStatement(statement);
        try {
            int affectedRows = super.statement_executeUpdate(chain, statement, sql, columnNames);
            eventBuilder.setAffectedRows(affectedRows);
            return affectedRows;
        } catch (SQLException e) {
            eventBuilder.setThrowable(e);
            throw e;
        } finally {
            XLog.appendEvent(eventBuilder.build());
        }
    }
}
